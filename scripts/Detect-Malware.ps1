<#
Flags suspicious outbound communications in network_events.csv using simple C2 heuristics.
#>

[CmdletBinding()]
param(
  [string]$InputCsv,
  [string]$OutputBasePath,
  [int]$WindowMinutes = 15,
  [int]$MinBursts = 8,
  [int]$SmallPktMax = 15
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
$PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'

# Resolve default paths
$scriptRoot = Split-Path -Parent -Path $MyInvocation.MyCommand.Path
if ([string]::IsNullOrWhiteSpace($InputCsv))       { $InputCsv       = Join-Path (Join-Path $scriptRoot '..\data') 'sample-logs\network_events.csv' }
if ([string]::IsNullOrWhiteSpace($OutputBasePath)) { $OutputBasePath = Join-Path $scriptRoot '..\data' }

$reports = Join-Path $OutputBasePath 'reports'
$intel   = Join-Path $OutputBasePath 'threat-intel'
New-Item -ItemType Directory -Force -Path $reports, $intel | Out-Null

if (-not (Test-Path $InputCsv)) {
  Write-Error "Input CSV not found: $InputCsv`nRun Generate-SecurityEvents.ps1 first."
}

# Optional tiny TI set (IPs/domains, 1 per line, *.txt files in data\threat-intel)
$tiSet = [System.Collections.Generic.HashSet[string]]::new([System.StringComparer]::OrdinalIgnoreCase)
@(Get-ChildItem -Path $intel -Filter *.txt -ErrorAction SilentlyContinue) | ForEach-Object {
  @((Get-Content $_.FullName -ErrorAction SilentlyContinue)) |
    Where-Object { -not [string]::IsNullOrWhiteSpace($_) } |
    ForEach-Object { $null = $tiSet.Add($_.Trim()) }
}

# Load + normalize rows
$rows = @(Import-Csv -Path $InputCsv)
if (@($rows).Count -eq 0) {
  Write-Host "No rows found in $InputCsv" -ForegroundColor Yellow
  return
}

$evts = @(
  $rows | ForEach-Object {
    $ts = try { [datetime]::Parse($_.Timestamp) } catch { [datetime]::MinValue }
    [pscustomobject]@{
      Timestamp = $ts
      Direction = $_.Direction
      Protocol  = $_.Protocol
      SrcIP     = $_.SrcIP
      SrcPort   = $_.SrcPort
      DstIP     = $_.DstIP
      DstPort   = $_.DstPort
      Bytes     = ($_.'Bytes' -as [int])
      Packets   = ($_.'Packets' -as [int])
      Computer  = $_.Computer
      User      = $_.User
    }
  } | Where-Object { $_.Timestamp -gt [datetime]::MinValue -and $_.Direction -eq 'OUTBOUND' }
)

if (@($evts).Count -eq 0) {
  Write-Host "No OUTBOUND network events found." -ForegroundColor Yellow
  return
}

# Heuristics
$window          = [TimeSpan]::FromMinutes($WindowMinutes)
$suspiciousPorts = @(4444,1337,6667,8081,9001,9050)
$malFindings     = New-Object System.Collections.Generic.List[object]

# Group by (SrcIP, DstIP, DstPort)
$evts | Group-Object SrcIP, DstIP, DstPort | ForEach-Object {
  $groupEvents = @($_.Group | Sort-Object Timestamp)   # ensure array
  $n = $groupEvents.Count
  if ($n -lt $MinBursts) { return }

  $l = 0
  for ($r = 0; $r -lt $n; $r++) {
    while ($groupEvents[$r].Timestamp - $groupEvents[$l].Timestamp -gt $window) { $l++ }
    $count = $r - $l + 1
    if ($count -ge $MinBursts) {
      $first = $groupEvents[$l]
      $last  = $groupEvents[$r]
      $slice = @($groupEvents[$l..$r])

      # Averages (defensive when count==0)
      $avgBytes   = 0
      $avgPackets = 0
      $mBytes   = ($slice | Measure-Object -Property Bytes   -Average)
      $mPackets = ($slice | Measure-Object -Property Packets -Average)
      if ($mBytes.Average   -ne $null) { $avgBytes   = [int]([math]::Round($mBytes.Average,0)) }
      if ($mPackets.Average -ne $null) { $avgPackets = [int]([math]::Round($mPackets.Average,0)) }

      $dstPortInt   = ($slice[0].DstPort -as [int])
      $isSmall      = ($avgPackets -le $SmallPktMax)
      $isWeirdPort  = $false; if ($dstPortInt -ne $null) { $isWeirdPort = $dstPortInt -in $suspiciousPorts }
      $tiHit        = $false; if ($tiSet.Count -gt 0)    { if ($tiSet.Contains($slice[0].DstIP)) { $tiHit = $true } }

      $score = 0
      if ($isSmall)               { $score += 2 }
      if ($isWeirdPort)           { $score += 2 }
      if ($tiHit)                 { $score += 3 }
      if (($last.Timestamp - $first.Timestamp).TotalMinutes -ge 5) { $score += 1 }

      if ($score -ge 3) {
        $malFindings.Add([pscustomobject]@{
          SrcIP          = $slice[0].SrcIP
          DstIP          = $slice[0].DstIP
          DstPort        = $slice[0].DstPort
          FirstTimestamp = $first.Timestamp.ToString('s')
          LastTimestamp  = $last.Timestamp.ToString('s')
          Count          = $count
          AvgBytes       = $avgBytes
          AvgPackets     = $avgPackets
          TI_Hit         = $tiHit
          SuspiciousPort = $isWeirdPort
          Score          = $score
        })
      }
    }
  }
}

# Outputs
$malUnique = @($malFindings | Sort-Object SrcIP, DstIP, DstPort, LastTimestamp -Unique)
$stamp     = Get-Date -Format 'yyyyMMdd_HHmmss'
$csvOut    = Join-Path $reports ("Malware_{0}.csv" -f $stamp)
$txtOut    = Join-Path $reports ("Malware_{0}.txt" -f $stamp)

$malUnique | Export-Csv -Path $csvOut -NoTypeInformation -Encoding utf8

$hits = @($malUnique).Count
$sev  = 'Informational'
if     ($hits -ge 10) { $sev = 'Critical' }
elseif ($hits -ge 5)  { $sev = 'High' }
elseif ($hits -ge 1)  { $sev = 'Medium' }

$lines = @()
$lines += "MALWARE COMMUNICATION REPORT"
$lines += "Generated : $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
$lines += "Source    : $InputCsv"
$lines += "Window    : $WindowMinutes minute(s)"
$lines += "MinBursts : $MinBursts connections"
$lines += "Findings  : $hits  (Overall Severity: $sev)"
$lines += ""
foreach ($f in $malUnique) {
  $lines += (" - Src={0}  Dst={1}:{2}  Count={3}  AvgPkts={4}  TI={5}  SuspPort={6}  First={7}  Last={8}" -f `
            $f.SrcIP, $f.DstIP, $f.DstPort, $f.Count, $f.AvgPackets, $f.TI_Hit, $f.SuspiciousPort, $f.FirstTimestamp, $f.LastTimestamp)
}
$lines | Out-File -FilePath $txtOut -Encoding utf8

$fc = 'Green'; if ($hits -gt 0) { $fc = 'Red' }
Write-Host "Malware-like comms: $hits  (Severity: $sev)" -ForegroundColor $fc
Write-Host "Report (TXT): $txtOut" -ForegroundColor DarkGray
Write-Host "Report (CSV): $csvOut" -ForegroundColor DarkGray
