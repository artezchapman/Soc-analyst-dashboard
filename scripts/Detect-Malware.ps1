# Detect-Malware.ps1
# Analyzes network events for malware communication patterns
# Author: Artez Chapman
# Purpose: Demonstrate SOC analyst threat detection and IOC matching

[CmdletBinding()]
param(
    [Parameter(Mandatory=$false)]
    [string]$LogPath = ".\data\sample-logs\network_events.csv",
    
    [Parameter(Mandatory=$false)]
    [string]$ThreatIntelPath = ".\data\threat-intel\",
    
    [Parameter(Mandatory=$false)]
    [string]$OutputPath = ".\docs\incident-reports\"
)

Write-Host "SOC Analyst Dashboard - Malware Communication Detection" -ForegroundColor Cyan
Write-Host "======================================================" -ForegroundColor Cyan

# Ensure output directory exists
if (!(Test-Path $OutputPath)) {
    New-Item -ItemType Directory -Path $OutputPath -Force | Out-Null
}

# Create threat intelligence directory and populate with IOCs
if (!(Test-Path $ThreatIntelPath)) {
    New-Item -ItemType Directory -Path $ThreatIntelPath -Force | Out-Null
    Write-Host "Created threat intelligence directory: $ThreatIntelPath" -ForegroundColor Green
}

# Create malicious IP list (known bad actors from threat feeds)
$MaliciousIPs = @"
# Malicious IP Addresses - Threat Intelligence Feed
# Source: SOC Analyst Dashboard (Simulated IOCs)
# Last Updated: $(Get-Date -Format 'yyyy-MM-dd')
#
185.220.101.42,Botnet C2 Server,High,Active
45.33.32.156,Malware Distribution,High,Active
104.244.72.115,Phishing Infrastructure,Medium,Active
203.0.113.195,APT Command & Control,Critical,Active
198.51.100.178,Cryptocurrency Mining,Medium,Active
185.220.102.8,Data Exfiltration,High,Active
192.0.2.146,Trojan Communication,High,Active
198.51.100.25,Suspicious Activity,Low,Monitoring
"@

$MaliciousIPs | Out-File -FilePath "$ThreatIntelPath\malicious_ips.csv" -Encoding UTF8

# Create malicious domains list
$MaliciousDomains = @"
# Malicious Domains - Threat Intelligence Feed
# Source: SOC Analyst Dashboard (Simulated IOCs)
# Last Updated: $(Get-Date -Format 'yyyy-MM-dd')
#
evil-c2.example.com,Command and Control,Critical,Active
malware-dist.badsite.org,Malware Distribution,High,Active
phish-site.fake-bank.net,Phishing,High,Active
crypto-miner.suspicious.biz,Cryptomining,Medium,Active
data-exfil.attacker.info,Data Exfiltration,Critical,Active
"@

$MaliciousDomains | Out-File -FilePath "$ThreatIntelPath\malicious_domains.csv" -Encoding UTF8

Write-Host "üìä Analysis Parameters:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Network Log: $LogPath" -ForegroundColor White
Write-Host "   ‚Ä¢ Threat Intel: $ThreatIntelPath" -ForegroundColor White
Write-Host ""

# Check if network log exists
if (!(Test-Path $LogPath)) {
    Write-Host "‚ùå Error: Network log not found at $LogPath" -ForegroundColor Red
    Write-Host "Run Generate-SecurityEvents.ps1 first to create sample data" -ForegroundColor Yellow
    exit 1
}

# Load network events
Write-Host "üìÇ Loading network events..." -ForegroundColor Yellow
try {
    $NetworkEvents = Import-Csv -Path $LogPath
    Write-Host "‚úÖ Loaded $($NetworkEvents.Count) network events" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error loading network events: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Load threat intelligence
Write-Host "üîç Loading threat intelligence..." -ForegroundColor Yellow
$ThreatIPs = @{}
$MaliciousIPData = Get-Content "$ThreatIntelPath\malicious_ips.csv" | Where-Object {$_ -notlike "#*" -and $_ -ne ""}
foreach ($Line in $MaliciousIPData) {
    $Parts = $Line -split ","
    if ($Parts.Count -ge 4) {
        $ThreatIPs[$Parts[0]] = [PSCustomObject]@{
            IP = $Parts[0]
            Category = $Parts[1]
            Severity = $Parts[2]
            Status = $Parts[3]
        }
    }
}
Write-Host "   ‚Ä¢ Loaded $($ThreatIPs.Count) malicious IP indicators" -ForegroundColor White

# Analyze network events for malware communication
Write-Host "`nüéØ Analyzing for malware communications..." -ForegroundColor Yellow

$MalwareConnections = @()

foreach ($Event in $NetworkEvents) {
    $IsMalicious = $false
    $ThreatInfo = $null
    
    # Check destination IP against threat intelligence
    if ($ThreatIPs.ContainsKey($Event.DestinationIP)) {
        $IsMalicious = $true
        $ThreatInfo = $ThreatIPs[$Event.DestinationIP]
    }
    
    # Check source IP against threat intelligence (infected host communicating out)
    if ($ThreatIPs.ContainsKey($Event.SourceIP)) {
        $IsMalicious = $true
        $ThreatInfo = $ThreatIPs[$Event.SourceIP]
    }
    
    # Additional behavioral analysis
    $SuspiciousBehavior = $false
    $BehaviorReason = ""
    
    # Check for suspicious ports
    $SuspiciousPorts = @(1337, 31337, 6666, 6667, 9999, 8080)
    if ($Event.Port -in $SuspiciousPorts) {
        $SuspiciousBehavior = $true
        $BehaviorReason += "Suspicious port $($Event.Port); "
    }
    
    # Check for unusual data volumes
    if ($Event.Bytes -gt 50000) {
        $SuspiciousBehavior = $true
        $BehaviorReason += "Large data transfer ($($Event.Bytes) bytes); "
    }
    
    # Check for off-hours communication to external IPs
    $EventTime = [DateTime]$Event.Timestamp
    $IsOffHours = $EventTime.Hour -lt 6 -or $EventTime.Hour -gt 22
    if ($IsOffHours -and $Event.DestinationIP -notlike "192.168.*" -and $Event.DestinationIP -notlike "10.*" -and $Event.DestinationIP -notlike "172.16.*") {
        $SuspiciousBehavior = $true
        $BehaviorReason += "Off-hours external communication; "
    }
    
    if ($IsMalicious -or $SuspiciousBehavior) {
        $Severity = if ($IsMalicious) { $ThreatInfo.Severity } else { "Medium" }
        $Category = if ($IsMalicious) { $ThreatInfo.Category } else { "Suspicious Behavior" }
        
        $MalwareConnection = [PSCustomObject]@{
            Timestamp = $Event.Timestamp
            SourceIP = $Event.SourceIP
            DestinationIP = $Event.DestinationIP
            Port = $Event.Port
            Protocol = $Event.Protocol
            Bytes = $Event.Bytes
            ThreatType = $Category
            Severity = $Severity
            IOCMatch = $IsMalicious
            BehaviorMatch = $SuspiciousBehavior
            Reason = if ($IsMalicious) { "IOC Match: $Category" } else { $BehaviorReason.TrimEnd("; ") }
            Status = "Active"
        }
        
        $MalwareConnections += $MalwareConnection
    }
}

# Display results
Write-Host "`n" + "="*60 -ForegroundColor Cyan
Write-Host "ü¶† MALWARE COMMUNICATION DETECTION RESULTS" -ForegroundColor Cyan
Write-Host "="*60 -ForegroundColor Cyan

if ($MalwareConnections.Count -eq 0) {
    Write-Host "‚úÖ No malware communications detected" -ForegroundColor Green
    Write-Host "   All network traffic appears benign" -ForegroundColor White
} else {
    Write-Host "üö® MALWARE COMMUNICATIONS DETECTED: $($MalwareConnections.Count)" -ForegroundColor Red
    Write-Host ""
    
    # Group by severity for summary
    $BySeverity = $MalwareConnections | Group-Object Severity
    foreach ($Group in $BySeverity | Sort-Object Name) {
        $Color = switch ($Group.Name) {
            "Critical" { "Magenta" }
            "High" { "Red" }
            "Medium" { "Yellow" }
            "Low" { "White" }
        }
        Write-Host "   $($Group.Name): $($Group.Count) incidents" -ForegroundColor $Color
    }
    
    Write-Host "`nüìä TOP THREATS:" -ForegroundColor Yellow
    $TopThreats = $MalwareConnections | Group-Object DestinationIP | Sort-Object Count -Descending | Select-Object -First 5
    
    foreach ($Threat in $TopThreats) {
        $Sample = $Threat.Group[0]
        $SeverityColor = switch ($Sample.Severity) {
            "Critical" { "Magenta" }
            "High" { "Red" }
            "Medium" { "Yellow" }
            default { "White" }
        }
        
        Write-Host "‚îå‚îÄ $($Threat.Name) [$($Sample.Severity)]" -ForegroundColor $SeverityColor
        Write-Host "‚îú‚îÄ Connections: $($Threat.Count)" -ForegroundColor White
        Write-Host "‚îú‚îÄ Threat Type: $($Sample.ThreatType)" -ForegroundColor White
        Write-Host "‚îú‚îÄ Affected Hosts: $(($Threat.Group | Group-Object SourceIP).Count)" -ForegroundColor White
        Write-Host "‚îî‚îÄ Detection: $($Sample.Reason)" -ForegroundColor White
        Write-Host ""
    }
}

# Generate detailed incident reports for critical/high threats
$HighValueThreats = $MalwareConnections | Where-Object {$_.Severity -in @("Critical", "High")}

if ($HighValueThreats.Count -gt 0) {
    Write-Host "üìÑ Generating detailed incident reports..." -ForegroundColor Yellow
    
    $ThreatGroups = $HighValueThreats | Group-Object DestinationIP
    
    foreach ($Group in $ThreatGroups) {
        $DestIP = $Group.Name
        $Connections = $Group.Group
        $FirstConnection = $Connections | Sort-Object Timestamp | Select-Object -First 1
        $IncidentID = "MW-$(Get-Date -Format 'yyyyMMdd-HHmmss')-$($DestIP -replace '\.','')"
        
        $AffectedHosts = ($Connections | Group-Object SourceIP).Name -join ", "
        $TotalBytes = ($Connections | Measure-Object Bytes -Sum).Sum
        $TimeSpan = ([DateTime]($Connections | Sort-Object Timestamp | Select-Object -Last 1).Timestamp) - ([DateTime]$FirstConnection.Timestamp)
        
        $IncidentReport = @"
SECURITY INCIDENT REPORT - MALWARE COMMUNICATION
===============================================

Incident ID: $IncidentID
Report Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
Analyst: SOC Analyst Dashboard (Automated Detection)
Classification: $($FirstConnection.Severity) Severity Malware Communication

THREAT SUMMARY
--------------
Threat Type: $($FirstConnection.ThreatType)
Malicious Destination: $DestIP
Status: Active Communication Detected
Risk Level: $($FirstConnection.Severity)

COMMUNICATION DETAILS
---------------------
Total Connections: $($Connections.Count)
Affected Internal Hosts: $AffectedHosts
Total Data Transferred: $([Math]::Round($TotalBytes/1024/1024, 2)) MB
Communication Window: $($TimeSpan.TotalMinutes.ToString('F1')) minutes
First Observed: $($FirstConnection.Timestamp)
Last Observed: $(($Connections | Sort-Object Timestamp | Select-Object -Last 1).Timestamp)

TECHNICAL ANALYSIS
------------------
Detection Method: $($FirstConnection.Reason)
IOC Match: $($FirstConnection.IOCMatch)
Behavioral Analysis: $($FirstConnection.BehaviorMatch)
Ports Used: $(($Connections | Group-Object Port).Name -join ", ")
Protocols: $(($Connections | Group-Object Protocol).Name -join ", ")

IMPACT ASSESSMENT
-----------------
‚Ä¢ Confirmed malware presence on internal network
‚Ä¢ Potential data exfiltration in progress
‚Ä¢ Command and control communication established
‚Ä¢ Risk of lateral movement within network
‚Ä¢ Possible credential theft and privilege escalation

RECOMMENDED ACTIONS
-------------------
IMMEDIATE (0-5 minutes):
1. Block communication to $DestIP at firewall
2. Isolate affected hosts: $AffectedHosts
3. Preserve system memory and disk images
4. Disable network access for infected systems

SHORT-TERM (5-30 minutes):
1. Run full antimalware scan on affected systems
2. Check for additional IOCs and lateral movement
3. Review DNS logs for malicious domain queries
4. Analyze system logs for persistence mechanisms

LONG-TERM (30+ minutes):
1. Forensic analysis of infected systems
2. Threat intelligence research on IOCs
3. Network segmentation review
4. Incident response team activation
5. User notification and awareness training

CONTAINMENT STATUS
------------------
Status: OPEN - Immediate action required
Priority: $($FirstConnection.Severity)
Assigned To: SOC Team Lead
Escalation: $(if ($FirstConnection.Severity -eq "Critical") {"CISO notification required"} else {"Manager notification"})

EVIDENCE PRESERVATION
--------------------
‚Ä¢ Network flow logs: $LogPath
‚Ä¢ IOC threat intelligence: $ThreatIntelPath
‚Ä¢ System artifacts: Pending collection
‚Ä¢ Memory dumps: Pending collection

--- END REPORT ---
"@

        $ReportPath = "$OutputPath\$IncidentID.txt"
        $IncidentReport | Out-File -FilePath $ReportPath -Encoding UTF8
        Write-Host "   ‚úÖ Report saved: $IncidentID.txt" -ForegroundColor Green
    }
}

# Export all malware connections for dashboard
if ($MalwareConnections.Count -gt 0) {
    $MalwareConnections | Export-Csv -Path "$OutputPath\malware_communications.csv" -NoTypeInformation
    Write-Host "   üìä Communication data: malware_communications.csv" -ForegroundColor Green
}

# Generate detection metrics
$DetectionMetrics = [PSCustomObject]@{
    Timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
    TotalEvents = $NetworkEvents.Count
    MalwareConnections = $MalwareConnections.Count
    IOCMatches = ($MalwareConnections | Where-Object {$_.IOCMatch}).Count
    BehavioralDetections = ($MalwareConnections | Where-Object {$_.BehaviorMatch}).Count
    CriticalThreats = ($MalwareConnections | Where-Object {$_.Severity -eq "Critical"}).Count
    HighThreats = ($MalwareConnections | Where-Object {$_.Severity -eq "High"}).Count
    MediumThreats = ($MalwareConnections | Where-Object {$_.Severity -eq "Medium"}).Count
    AffectedHosts = ($MalwareConnections | Group-Object SourceIP | Measure-Object).Count
    MaliciousDestinations = ($MalwareConnections | Group-Object DestinationIP | Measure-Object).Count
}

$DetectionMetrics | Export-Csv -Path "$OutputPath\malware_detection_metrics.csv" -NoTypeInformation -Append

Write-Host "`nüìà DETECTION METRICS" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Total Network Events: $($DetectionMetrics.TotalEvents)" -ForegroundColor White
Write-Host "   ‚Ä¢ Malware Communications: $($DetectionMetrics.MalwareConnections)" -ForegroundColor $(if ($DetectionMetrics.MalwareConnections -gt 0) {'Red'} else {'Green'})
Write-Host "   ‚Ä¢ IOC Matches: $($DetectionMetrics.IOCMatches)" -ForegroundColor White
Write-Host "   ‚Ä¢ Behavioral Detections: $($DetectionMetrics.BehavioralDetections)" -ForegroundColor White
Write-Host "   ‚Ä¢ Affected Internal Hosts: $($DetectionMetrics.AffectedHosts)" -ForegroundColor White

if ($MalwareConnections.Count -gt 0) {
    Write-Host "   ‚Ä¢ Critical: $($DetectionMetrics.CriticalThreats) | High: $($DetectionMetrics.HighThreats) | Medium: $($DetectionMetrics.MediumThreats)" -ForegroundColor White
}

Write-Host "`nüéØ NEXT STEPS" -ForegroundColor Yellow
if ($MalwareConnections.Count -gt 0) {
    Write-Host "   1. Review generated incident reports immediately" -ForegroundColor Red
    Write-Host "   2. Block malicious destinations at network perimeter" -ForegroundColor Red
    Write-Host "   3. Isolate affected internal hosts" -ForegroundColor Red
    Write-Host "   4. Activate incident response procedures" -ForegroundColor Red
} else {
    Write-Host "   ‚úÖ No immediate action required for malware threats" -ForegroundColor Green
    Write-Host "   üìä Consider running additional analysis for comprehensive coverage" -ForegroundColor White
}

Write-Host "`n‚úÖ Malware communication analysis completed!" -ForegroundColor Green